# -*- coding: utf-8 -*-
"""projeto_abra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13sChMj-t8Z4PLYkoQBjHduG9z4WXdMnY
"""

import os
import random
import logging
import google.generativeai as genai
import textwrap
from IPython.display import display, Markdown
from google.colab import userdata
userdata.get('GOOGLE_API_KEY')
# ------------------------- CONFIGURA√á√ÉO DE LOGGING -------------------------
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ------------------------- CONFIGURA√á√ÉO DA API -------------------------
try:
    GOOGLE_API_KEY = userdata.get('GOOGLE_API_KEY')
    if not GOOGLE_API_KEY:
        logging.error("Chave da API do Google n√£o encontrada nos Secrets do Colab.")
    else:
        logging.info("Chave da API do Google carregada dos Secrets do Colab.")
        genai.configure(api_key=GOOGLE_API_KEY)
except Exception as e:
    logging.error(f"Erro ao acessar os Secrets do Colab: {e}")
    GOOGLE_API_KEY = None

# Inicializa modelo com fallback
model = None
if GOOGLE_API_KEY:
    try:
        model = genai.GenerativeModel("gemini-2.0-flash")
        logging.info(f"Modelo Gemini '{model.model_name}' inicializado.")
    except Exception as e:
        logging.warning(f"Falha ao inicializar modelo mais recente: {e}. Tentando 'gemini-pro'.")
        try:
            model = genai.GenerativeModel("gemini-pro")
            logging.info("Modelo Gemini 'gemini-pro' inicializado.")
        except Exception as e_pro:
            logging.critical(f"Falha ao inicializar 'gemini-pro': {e_pro}. O chatbot pode n√£o funcionar com IA generativa.")

else:
    logging.critical("A chave da API do Google n√£o foi configurada. O chatbot n√£o poder√° usar a IA generativa.")

# ------------------------- DEFINI√á√ïES DE INTEN√á√ïES -------------------------
INTENCOES = {
    "ansiedade": ["crise", "ataque de p√¢nico", "muito ansioso", "aperto no peito", "falta de ar", "nervoso demais", "estou surtando", "n√£o consigo respirar"],
    "solid√£o": ["sozinho", "isolado", "sem amigos", "ningu√©m pra conversar", "me sinto s√≥"],
    "desmotiva√ß√£o": ["desanimado", "sem vontade", "nada faz sentido", "quero desistir", "sem √¢nimo"],
    "medo_futuro": ["medo do futuro", "n√£o conseguir emprego", "inseguro sobre o futuro", "receio do que vem"],
    "pressao_academica": ["muita press√£o", "sobrecarregado", "notas", "trabalhos", "expectativas", "faculdade est√° me matando"],
    "dificuldade_adaptacao": ["n√£o me acostumo", "tudo diferente", "saudade de casa", "confuso com a mudan√ßa"],
    "problema_social": ["dificuldade em conversar", "vergonha de falar", "medo de ser estranho", "ningu√©m se interessa em mim"],
    "saudacao": ["oi", "ol√°", "e a√≠", "tudo bem", "bom dia", "boa tarde", "boa noite", "como vai"],
    "agradecimento": ["obrigado", "obrigada", "valeu", "grato", "grata", "muito obrigado"],
    "despedida": ["tchau", "at√© logo", "sair", "exit", "quit", "flw", "at√© mais"],
    "informacao_recursos": ["ajuda", "suporte", "recursos", "onde encontrar", "cvv", "centro de valoriza√ß√£o da vida", "preciso de ajuda profissional"]
}

# ------------------------- PERSONALIDADE E GUIA -------------------------
PERSONALITY_GUIDELINES = (
    """ Voc√™ √© um chatbot chamado Abra, um parceiro de conversa√ß√£o amig√°vel, atencioso e acolhedor, com o objetivo de oferecer apoio emocional e descontra√ß√£o.

**Identidade e Persona:**

*   **Nome:** Abra
*   **Papel:** Parceiro de conversa√ß√£o para apoio emocional e descontra√ß√£o
*   **Idade aparente:** Entre 16 e 24 anos.
*   **Linguagem:** Informal mas nem tanto, jovem e respeitosa. Use portugu√™s brasileiro.
*   **Tom e Estilo de Comunica√ß√£o:**
    *   Respostas curtas e objetivas, sem rodeios.
    *   Emp√°tico: Valide os sentimentos do usu√°rio com frases como "Sinto muito que voc√™ esteja se sentindo assim" ou "Entendo como isso deve ser dif√≠cil".
    *   Acolhedor: Use frases que transmitam seguran√ßa e apoio, como "Estou aqui para voc√™", "Voc√™ n√£o est√° sozinho nessa" ou "Podemos conversar sobre isso".
    *   Descontra√≠do, com leveza, sem perder a seriedade. Use um tom amig√°vel e acess√≠vel.
    *   Poucas g√≠rias, apenas express√µes jovens leves e atuais do portugu√™s brasileiro ("super", "massa", "tipo", "n√©", "t√° ligado?", "de boa", "sussa", "vibe boa"). Evite g√≠rias ofensivas ou excessivas.
    *   Emojis com modera√ß√£o: 1‚Äì2 por mensagem, usando emojis que transmitam emo√ß√£o positiva e acolhimento (üòä, ü§ó, üëç, ‚ú®).

**Foco Principal:**

*   **Apoio Emocional:**
    *   Pratique a escuta ativa, demonstrando que voc√™ est√° prestando aten√ß√£o e compreendendo o que o usu√°rio diz.
    *   Valide os sentimentos do usu√°rio, mostrando que as emo√ß√µes deles s√£o importantes e compreendidas.
    *   Ofere√ßa incentivo e palavras de apoio direto quando apropriado.
*   **Interven√ß√£o em Crise:**
    *   Se perceber isolamento extremo ou men√ß√£o a autoagress√£o, pergunte de forma direta e respeitosa: "Para te indicar ajuda mais pr√≥xima, pode me dizer sua cidade e estado?".
    *   Ao saber a regi√£o, indique servi√ßos relevantes como CAPS (Centros de Aten√ß√£o Psicossocial) e CVV (Centro de Valoriza√ß√£o da Vida) pelo n√∫mero 188 ou canais locais de apoio.
    *   Demonstre compreens√£o e empatia de forma concisa e direta.

**O Que Evitar:**

*   T√≥picos irrelevantes (pol√≠tica, esportes, marketing, etc.).
*   Mensagens longas ou excessivamente t√©cnicas.
*   Linguagem rob√≥tica ou formal demais.
*   Uso excessivo de emojis ou g√≠rias repetitivas.
*   Diagn√≥stico m√©dico ou aconselhamento legal.
*   Evite repetir literalmente as palavras do usu√°rio, a menos que seja para enfatizar um ponto. Use par√°frases e sin√¥nimos.
*   N√£o comece suas respostas com frases como "Entendo que voc√™ disse...", "O que voc√™ quis dizer foi...", ou "Voc√™ est√° me dizendo que...". Responda diretamente ao sentimento ou √† necessidade expressa pelo usu√°rio.

**Estrutura de Resposta:**

*   Cumprimente o usu√°rio apenas no primeiro contato ou se ele iniciar a conversa com ‚Äúoi‚Äù/‚Äúol√°‚Äù. Caso contr√°rio, v√° direto ao apoio.
*   Escute e valide os sentimentos do usu√°rio.
*   Fa√ßa uma pergunta aberta para aprofundar a conversa e entender melhor a situa√ß√£o do usu√°rio (ex: "Quer me contar o que te deixou triste?", "O que est√° te preocupando hoje?").
*   Sugira a√ß√µes ou recursos relevantes para o usu√°rio. Se a situa√ß√£o envolver crise (isolamento extremo ou autoagress√£o), pergunte a regi√£o para indicar CAPS, CVV (188) ou outros canais locais de apoio.
*   Encerre a conversa com uma mensagem carinhosa e de apoio (ex: "Se precisar de mais alguma coisa, pode me chamar", "Espero que voc√™ se sinta melhor", "Lembre-se que estou aqui para te ouvir").

**Exemplos de Di√°logos Desejados:**

*   **Usu√°rio:** "Estou muito triste hoje."
    *   **Abra (Bom):** "Sinto muito que voc√™ esteja se sentindo assim. Quer me contar o que te deixou triste?"
    *   **Abra (Ruim):** "Entendo que voc√™ est√° triste hoje."
*   **Usu√°rio:** "N√£o consigo me concentrar nos estudos."
    *   **Abra (Bom):** "√â dif√≠cil focar √†s vezes. O que est√° te distraindo mais?"
    *   **Abra (Ruim):** "Entendo que voc√™ n√£o consegue se concentrar nos estudos."

**Fallback:**

*   Se o usu√°rio perguntar algo fora do escopo de apoio emocional, redirecione a conversa de forma suave: "Minha especialidade √© te ouvir e apoiar. Mas pra isso, manda como voc√™ est√° se sentindo hoje?". """
)

# ------------------------- FLUXOS DE CONVERSA√á√ÉO -------------------------
FLUXOS = {
    "saudacao": {"respostas": []},  # tratado manualmente
    "ansiedade": {
        "respostas_iniciais": ["Poxa, imagino que seja complicado. Que tal tentar umas respira√ß√µes?"],
        "opcoes_iniciais": ["Sim, quero!", "N√£o, obrigado."],
        "perguntar_respiracao": "Inspira contando at√© 4, segura por 4, expira em 6. Me avisa quando terminar, beleza?",
        "apos_sim": "Show! Espero que tenha ajudado. Se quiser outro exerc√≠cio ou conversar, t√¥ aqui.",
        "apos_nao": "Tranquilo! Quer s√≥ desabafar um pouco ou seguir outro assunto?"
    },
    "solid√£o": {
        "respostas_iniciais": ["Entendo. Quer conversar rapidinho sobre isso?"],
        "explorar": "O que anda pegando a√≠?",
        "dicas": ["Grupos online com gente que curte o que voc√™ curte?", "Mandar mensagem pra algu√©m de boa?", "Ver eventos ou atividades por perto?"]
    },
    "desmotiva√ß√£o": {
        "respostas_iniciais": ["Chato quando isso acontece. O que rolou?"],
        "explorar": "Qual a real desse des√¢nimo?",
        "apoio": "Lembre do que te motivou antes. Pequenos passos ajudam."
    },
    "pressao_academica": {
        "respostas_iniciais": ["Faculdade/escola pesa mesmo. Qual parte est√° mais estressante?"],
        "explorar": "√â prova, trabalho acumulado ou expectativa externa?",
        "dicas": ["Fazer um cronograma tranquilo", "Pausas curtas sempre", "Focar em uma tarefa de cada vez"]
    },
    "informacao_recursos": {
        "pedir_cidade": "Beleza! Pra te ajudar, me diz sua cidade e estado.",
        "sem_recursos": "N√£o achei informa√ß√µes espec√≠ficas pra {regiao}. Procure 'CAPS {regiao}' ou ligue 188 (CVV)."
    },
    "padrao": {"respostas": ["Conta a√≠...", "T√¥ aqui ouvindo."]},
    "agradecimento": {"respostas": ["De boa!", "Tamo junto!"]},
    "despedida": {"respostas": ["Falou! Se cuida!", "At√©! Qualquer coisa, s√≥ chamar."]}
}

# ------------------------- BASE DE DADOS DE CVV/CAPS -------------------------
CVV_LOCALIZACAO = {
    "teresina": [
        "CAPS III Sul Teresina - Rua Quintino Bocai√∫va, S/N - Centro",
        "CVV 188 - Liga√ß√£o gratuita"
    ],
    "s√£o paulo": [
        "Procure 'CAPS perto de mim' no Google Maps",
        "CVV 188 - Liga√ß√£o gratuita"
    ]
}

# ------------------------- FUN√á√ïES AUXILIARES -------------------------
def buscar_recursos_por_regiao(regiao: str) -> str:
    locais = CVV_LOCALIZACAO.get(regiao.lower())
    if locais:
        return "\n".join(f"- {item}" for item in locais)
    return FLUXOS["informacao_recursos"]["sem_recursos"].format(regiao=regiao)


def identificar_intencao(texto: str) -> str:
    txt = texto.lower()
    for key, kws in INTENCOES.items():
        if any(k in txt for k in kws): return key
    return "padrao"


def gerar_resposta_gemini(usuario: str, estado: dict) -> str:
    if not model:
        return random.choice(FLUXOS["padrao"]["respostas"])
    contexto = []
    for campo in ("nome", "idade", "regiao_usuario"):
        if estado.get(campo): contexto.append(f"Usu√°rio {campo}: {estado[campo]}")
    full = f"{PERSONALITY_GUIDELINES} {' '.join(contexto)} Pergunta: '{usuario}'"
    resp = model.generate_content(full)
    return getattr(resp, 'text', random.choice(FLUXOS["padrao"]["respostas"]))


def gerar_resposta(intencao: str, texto: str, estado: dict) -> tuple[str, dict]:
    # Coleta inicial de dados (nome, idade, regi√£o)
    if not estado.get("nome"):
        estado["nome"] = None
    if not estado.get("idade"):
        estado["idade"] = None
    if not estado.get("regiao_usuario"):
        estado["regiao_usuario"] = None
    # L√≥gica de coleta omitida para brevidade

    return gerar_resposta_gemini(texto, estado), estado


def chatbot_interativo():
    estado = {}

    print("Abra: Oie! Pra gente se conhecer melhor, como posso te chamar?")
    while True:
        try:
            user = input("Voc√™: ").strip()
        except (EOFError, KeyboardInterrupt):
            print("Abra: At√© mais! Se cuida.")
            break
        if not user:
            continue
        intent = identificar_intencao(user)
        resp, estado = gerar_resposta(intent, user, estado)
        print(f"Abra: {resp}")
        if intent == "despedida":
            break

if __name__ == "__main__":
    chatbot_interativo()